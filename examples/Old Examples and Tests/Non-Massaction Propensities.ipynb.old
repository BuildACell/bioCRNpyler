{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Non-massaction propensities in BioCRNpyler\n",
    "The propensity $\\rho(s)$ (or rate function) of a chemical reaction determines how quickly that reaction occurs. It is assumed to be a function of the chemical species $s$ as well as internal parameter specific to the propensity type.\n",
    "\n",
    "\\begin{equation}\n",
    "\\{\\textrm{Input Species}\\} \\xrightarrow{\\rho(s)} \\{\\textrm{Output Species}\\}\n",
    "\\end{equation}\n",
    "\n",
    "By default, BioCRNpyler assumes that propensities are massaction with only one parameter, the rate constant $k$. However, non-massaction propensities are also supported. When creating a reaction with non-massaction propensities, a propensity_params dictionary must be passed into the chemical_reaction_network.reaction constructor with the appropriate parameters for that particular propensity type. The supported propensity types and their relevant parameters are:\n",
    "\n",
    "1. \"massaction: $\\rho(S) = k \\Pi_{s} s^{I_s}$. Required parameters: \"k\" the rate constant. Note: for stochastic models mass action propensities are $\\rho(S) = k \\Pi_{s} s!/(s - I_s)!$.\n",
    "2. \"positivehill\": $\\rho(s) = k \\frac{s^n}{(K^n+s^n)}$. Requried parameters: rate constant \"k\", offset \"K\", hill coefficient \"n\", hill species \"s1\".\n",
    "3. \"negativehill\": $\\rho(s) = k \\frac{1}{(K^n+s^n)}$. Requried parameters: rate constant \"k\", offset \"K\", hill coefficient \"n\", hill species \"s1\".\n",
    "4. \"proportionalpositivehill\": $\\rho(s) = k d \\frac{s^n}{(K^n+s^n)}$. Requried parameters: rate constant \"k\", offset \"K\", hill coefficient \"n\", hill species \"s1\", propritional species \"d\".\n",
    "5. \"proportionalnegativehill\": $\\rho(s) = k d \\frac{1}{(K^n+s^n)}$. Requried parameters: rate constant \"k\", offset \"K\", hill coefficient \"n\", hill species \"s1\", propritional species \"d\".\n",
    "6. \"general\": $\\rho(s) = f(s)$ where $f$ can be any algebraic function typed as a string. Required parameters: \"rate\" an algebraic expression including species and model parameters written as a string.\n",
    "\n",
    "The following notebook contains examples of the propensity types support by BioCRNpyler."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Massaction Activation Species = dna_G, protein_A, complex_dna_G_2x_protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G + 2 protein_A <--> complex_dna_G_2x_protein_A        massaction: k_f(dna_G,protein_A)=100*dna_G*protein_A^2 k_r(complex_dna_G_2x_protein_A)=10*complex_dna_G_2x_protein_A\n",
      "\tcomplex_dna_G_2x_protein_A --> complex_dna_G_2x_protein_A + protein_X        massaction: k_f(complex_dna_G_2x_protein_A)=1.0*complex_dna_G_2x_protein_A\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n",
      "\n",
      "Massaction Repression Species = dna_G, protein_A, complex_dna_G_2x_protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G + 2 protein_A <--> complex_dna_G_2x_protein_A        massaction: k_f(dna_G,protein_A)=100*dna_G*protein_A^2 k_r(complex_dna_G_2x_protein_A)=10*complex_dna_G_2x_protein_A\n",
      "\tdna_G --> dna_G + protein_X        massaction: k_f(dna_G)=1.0*dna_G\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n",
      "\n",
      "Hill Positive CRN Species = dna_G, protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G --> dna_G + protein_X        hillpositive: k(protein_A)=1.0*protein_A^2/(10.0+protein_A^2)\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n",
      "\n",
      "Proportional Hill Positive CRN Species = dna_G, protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G --> dna_G + protein_X        proportionalhillpositive: k(protein_A, dna_G)=1.0*dna_G*protein_A^2/(10.0+protein_A^2)\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n",
      "\n",
      "Hill Negative CRN Species = dna_G, protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G --> dna_G + protein_X        hillnegative: k(protein_A)=1.0*1/(10.0+protein_A^2)\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n",
      "\n",
      "Proportional Hill Negative CRN Species = dna_G, protein_A, protein_X\n",
      "Reactions = [\n",
      "\tdna_G --> dna_G + protein_X        proportionalhillnegative: k(protein_A, dna_G)=1.0*dna_G/(10.0+protein_A^2)\n",
      "\tprotein_X -->         massaction: k_f(protein_X)=0.1*protein_X\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "from biocrnpyler.chemical_reaction_network import Species, Reaction, ComplexSpecies, ChemicalReactionNetwork\n",
    "\n",
    "\n",
    "#Names of different supported propensities\n",
    "propensity_types = ['hillpositive', 'proportionalhillpositive', 'hillnegative', 'proportionalhillnegative', 'massaction', 'general']\n",
    "\n",
    "#Parameter Values\n",
    "kb = 100\n",
    "ku = 10\n",
    "kex = 1.\n",
    "kd = .1\n",
    "\n",
    "#Species\n",
    "G = Species(name = \"G\", material_type = \"dna\") #DNA\n",
    "A = Species(name = \"A\", material_type = \"protein\") #Activator\n",
    "GA = ComplexSpecies([G, A, A]) #Activated Gene\n",
    "X = Species(name = \"X\", material_type = \"protein\")\n",
    "\n",
    "rxnd = Reaction([X], [], kd)\n",
    "\n",
    "#Massaction Activation\n",
    "species1 = [G, A, GA, X]\n",
    "rxn0_1 = Reaction([G, A, A], [GA], k=kb, k_rev = ku)\n",
    "rxn0_2 = Reaction([GA], [GA, X], k=kex)\n",
    "CRN0 = ChemicalReactionNetwork(species1, [rxn0_1, rxn0_2, rxnd])\n",
    "print(\"\\nMassaction Activation\", repr(CRN0))\n",
    "\n",
    "#Massaction Repressed\n",
    "rxn1_1 = Reaction([G, A, A], [GA], k=kb, k_rev = ku)\n",
    "rxn1_2 = Reaction([G], [G, X], k=kex)\n",
    "CRN1 = ChemicalReactionNetwork(species1, [rxn1_1, rxn1_2, rxnd])\n",
    "print(\"\\nMassaction Repression\", repr(CRN1))\n",
    "\n",
    "#hill positive\n",
    "species2 = [G, A, X]\n",
    "rxn2_1 = Reaction([G], [G, X], propensity_type = \"hillpositive\", propensity_params = {\"k\":kex, \"n\":2, \"K\":float(kb/ku), \"s1\":A})\n",
    "CRN2 = ChemicalReactionNetwork(species2, [rxn2_1, rxnd])\n",
    "print(\"\\nHill Positive CRN\", repr(CRN2))\n",
    "\n",
    "#proportional hill positive\n",
    "rxn3_1 = Reaction([G], [G, X], propensity_type = \"proportionalhillpositive\", propensity_params = {\"k\":kex, \"n\":2, \"K\":float(kb/ku), \"s1\":A, \"d\":G})\n",
    "CRN3 = ChemicalReactionNetwork(species2, [rxn3_1, rxnd])\n",
    "print(\"\\nProportional Hill Positive CRN\", repr(CRN3))\n",
    "\n",
    "#hill Negative\n",
    "rxn4_1 = Reaction([G], [G, X], propensity_type = \"hillnegative\", propensity_params = {\"k\":kex, \"n\":2, \"K\":float(kb/ku), \"s1\":A})\n",
    "CRN4 = ChemicalReactionNetwork(species2, [rxn4_1, rxnd])\n",
    "print(\"\\nHill Negative CRN\", repr(CRN4))\n",
    "\n",
    "#proportional hill negative\n",
    "rxn5_1 = Reaction([G], [G, X], propensity_type = \"proportionalhillnegative\", propensity_params = {\"k\":kex, \"n\":2, \"K\":float(kb/ku), \"s1\":A, \"d\":G})\n",
    "CRN5 = ChemicalReactionNetwork(species2, [rxn5_1, rxnd])\n",
    "print(\"\\nProportional Hill Negative CRN\", repr(CRN5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
